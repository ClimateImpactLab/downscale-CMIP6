# Rolling QDM test case
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: dc6-dev-
  labels:
    component: dc6
    env: dev
spec:
  arguments:
    parameters:
      - name: reference-zarr
        value: "az://scratch/clean-dev/ERA-5/tasmax.1995-2014.0p25.zarr"
      - name: gcm-historical-zarr
        value: "az://clean/ACCESS-ESM1-5/training/r1i1p1f1/tasmax.zarr"
      - name: gcm-training-zarr
        value: "az://clean/ACCESS-ESM1-5/training/r1i1p1f1/tasmax.zarr"
      - name: gcm-future-zarr
        value: "az://clean/ACCESS-ESM1-5/ssp370/r1i1p1f1/tasmax.zarr"
      - name: out-zarr
        value: "az://scratch/{{ workflow.name }}/out.zarr"
      - name: target-variable
        value: tasmax
      - name: biascorrect-firstfutureyear
        value: 1980
      - name: biascorrect-lastfutureyear
        value: 2099
      - name: domainfile1x1
        value: "az://support/domain.1x1.zarr"
      - name: domainfile0p25x0p25
        value: "az://support/domain.0p25x0p25.zarr"
  serviceAccountName: workflows-default
  # So workers go on larger, spot, worker node pool.
  nodeSelector:
    dedicated: worker
  tolerations:
    - key: dedicated
      operator: "Equal"
      value: "worker"
      effect: "NoSchedule"
    - key: kubernetes.azure.com/scalesetpriority
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"
  entrypoint: main
  templates:

    - name: main
      dag:
        tasks:
          - name: reference-1x1regrid
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.reference-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/reference-1x1regrid.zarr"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: reference-1x1rechunk
            dependencies: [ reference-1x1regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.reference-1x1regrid.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/reference-1x1rechunk.zarr"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10
          - name: reference-0p25x0p25regrid
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.reference-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/reference-0p25x0p25regrid.zarr"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile0p25x0p25 }}"
          - name: reference-0p25x0p25rechunk
            dependencies: [ reference-0p25x0p25regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.reference-0p25x0p25regrid.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/reference-0p25x0p25rechunk.zarr"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10
          - name: reference-1x1regrid-nearestneighbor
            dependencies: [ reference-0p25x0p25regrid ]
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.reference-0p25x0p25regrid.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/reference-1x1regrid-nearestneighbor.zarr"
                - name: regrid-method
                  value: "nearest_s2d"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: reference-1x1rechunk-nearestneighbor
            dependencies: [ reference-1x1regrid-nearestneighbor ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.reference-1x1regrid-nearestneighbor.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/reference-1x1rechunk-nearestneighbor.zarr"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10
          - name: gcm-historical-regrid
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.gcm-historical-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-historical-regrid.zarr"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: gcm-historical-rechunk
            dependencies: [ gcm-historical-regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-historical-regrid.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-historical-rechunk.zarr"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10
          - name: gcm-training-regrid
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.gcm-training-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-training-regrid.zarr"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: gcm-training-rechunk
            dependencies: [ gcm-training-regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-training-regrid.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-training-rechunk.zarr"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10
          - name: gcm-future-regrid
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.gcm-future-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-future-regrid.zarr"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: gcm-future-rechunk
            dependencies: [ gcm-future-regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-future-regrid.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-future-rechunk.zarr"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10
          - name: biascorrect
            dependencies: [ gcm-training-rechunk, gcm-future-rechunk, reference-1x1rechunk ]
            template: biascorrect-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ workflow.parameters.target-variable }}"
                - name: ref-zarr
                  value: "{{ tasks.reference-1x1rechunk.outputs.parameters.out-zarr }}"
                - name: hist-zarr
                  value: "{{ tasks.gcm-training-rechunk.outputs.parameters.out-zarr }}"
                - name: future-zarr
                  value: "{{ tasks.gcm-future-rechunk.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/biascorrected.zarr"
                - name: kind
                  value: additive
                - name: firstyear
                  value: "{{ workflow.parameters.biascorrect-firstfutureyear }}"
                - name: lastyear
                  value: "{{ workflow.parameters.biascorrect-lastfutureyear }}"
          - name: upsample-biascorrected
            template: upsample
            dependencies: [ biascorrect ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.biascorrect.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/biascorrected-0p25x0p25-upsampled.zarr"
                - name: lat-scale
                  value: 4
                - name: lon-scale
                  value: 4
          - name: rechunk-biascorrected
            template: rechunk
            dependencies: [ upsample-biascorrected ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.upsample-biascorrected.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/biascorrected-rechunked.zarr"
                - name: time-chunk
                  value: -1
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10
          - name: downscale-train-analog
            dependencies: [ reference-0p25x0p25rechunk, reference-1x1rechunk-nearestneighbor ]
            template: downscale-train-analog
            arguments:
              parameters:
                - name: variable
                  value: "{{ workflow.parameters.target-variable }}"
                - name: ref1x1-zarr
                  value: "{{ tasks.reference-1x1rechunk-nearestneighbor.outputs.parameters.out-zarr }}"
                - name: ref0p25x0p25-zarr
                  value: "{{ tasks.reference-0p25x0p25rechunk.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/analog-model.zarr"
                - name: kind
                  value: additive
                - name: firstyear
                  value: "{{ workflow.parameters.biascorrect-firstfutureyear }}"
                - name: lastyear
                  value: "{{ workflow.parameters.biascorrect-lastfutureyear }}"
          - name: downscale-analog-adjust-year
            dependencies: [ downscale-train-analog, rechunk-biascorrected ]
            template: downscale-analog-adjust-year
            arguments:
              parameters:
                - name: to-downscale-zarr
                  value: "{{ tasks.rechunk-biascorrected.outputs.parameters.out-zarr }}"
                - name: variable
                  value: "{{ workflow.parameters.target-variable }}"
                - name: year
                  value: "{{item}}"
                - name: analog-model-zarr
                  value: "{{ tasks.downscale-train-analog.outputs.parameters.out-zarr }}"
            withSequence:
              start: "{{ workflow.parameters.biascorrect-firstfutureyear }}"
              end: "{{ workflow.parameters.biascorrect-lastfutureyear }}"
          - name: downscale-netcdfs2zarr
            dependencies: [ downscale-analog-adjust-year ]
            template: netcdfs2zarr
            arguments:
              parameters:
                - name: in-dir
                  value: "scratch/{{workflow.name}}/analog-years/"
                - name: out-zarr
                  value: "{{ workflow.parameters.out-zarr }}"


    - name: regrid
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
          - name: regrid-method
          - name: domain-file
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.3.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ "dodola" ]
        args:
          - "regrid"
          - "{{ inputs.parameters.in-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--method"
          - "{{ inputs.parameters.regrid-method }}"
          - "--domain-file"
          - "{{ inputs.parameters.domain-file }}"
        resources:
          requests:
            memory: 48Gi
            cpu: "1000m"
          limits:
            memory: 48Gi
            cpu: "2000m"
      activeDeadlineSeconds: 3600
      retryStrategy:
        limit: 2
        retryPolicy: "Always"


    - name: rechunk
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
          - name: time-chunk
            value: 365
          - name: lat-chunk
            value: 10
          - name: lon-chunk
            value: 10
          - name: time-dim-name
            value: time
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.2.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ dodola ]
        args:
          - "rechunk"
          - "{{ inputs.parameters.in-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--chunk"
          - "{{ inputs.parameters.time-dim-name }}={{ inputs.parameters.time-chunk }}"
          - "--chunk"
          - "lat={{ inputs.parameters.lat-chunk }}"
          - "--chunk"
          - "lon={{ inputs.parameters.lon-chunk }}"
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "2000m"
      activeDeadlineSeconds: 10800


    - name: biascorrect-qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: hist-zarr
          - name: future-zarr
          - name: out-zarr  # Needs to be az://... format
          - name: firstyear
          - name: lastyear
          - name: kind
            value: additive
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.netcdfs2zarr.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: train-qdm
            template: train-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: hist-zarr
                  value: "{{ inputs.parameters.hist-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{workflow.name}}/qdm-model.zarr"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
          - name: qdm-adjust-year
            dependencies: [ train-qdm ]
            template: qdm-adjust-year
            arguments:
              parameters:
                - name: future-zarr
                  value: "{{ inputs.parameters.future-zarr }}"
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: year
                  value: "{{item}}"
                - name: qdm-model-zarr
                  value: "{{ tasks.train-qdm.outputs.parameters.out-zarr }}"
            withSequence:
              start: "{{ inputs.parameters.firstyear }}"
              end: "{{ inputs.parameters.lastyear }}"
          - name: netcdfs2zarr
            dependencies: [ qdm-adjust-year ]
            template: netcdfs2zarr
            arguments:
              parameters:
                - name: in-dir
                  value: "scratch/{{workflow.name}}/qdm-years/"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"

    - name: train-qdm-script
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr  # Needs to be az://... format
          - name: hist-zarr  # Needs to be az://... format
          - name: out-zarr  # Needs to be az://... format
          - name: kind
            value: additive
          - name: n-quantiles
            value: 100
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.3.0
        env:
          - name: VARIABLE
            value: "{{  inputs.parameters.variable }}"
          - name: REF_PATH
            value: "{{  inputs.parameters.ref-zarr }}"
          - name: HIST_PATH
            value: "{{  inputs.parameters.hist-zarr }}"
          - name: OUT
            value: "{{ inputs.parameters.out-zarr }}"
          - name: N_QUANTILES
            value: "{{ inputs.parameters.n-quantiles }}"
          - name: KIND
            value: "{{ inputs.parameters.kind }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          from xclim import sdba
          import numpy as np
          import xarray as xr

          kind_map = {"additive": "+", "multiplicative": "*"}
          model_kind = kind_map[os.environ.get("KIND").lower()]

          target_variable = os.environ.get("VARIABLE")
          refdf = xr.open_zarr(os.environ.get("REF_PATH"), chunks="auto")
          histdf = xr.open_zarr(os.environ.get("HIST_PATH"), chunks="auto")

          QDMdg = sdba.adjustment.QuantileDeltaMapping(
              kind=model_kind,
              group=sdba.Grouper("time.dayofyear", window=31),
              nquantiles=int(os.environ.get("N_QUANTILES"))
          )

          histdf = histdf.drop_vars("height")  # DEBUG!!!
          #histdf = histdf.drop_dims("bnds")  # DEBUG!!!

          print(refdf[target_variable])  # DEBUG
          print(histdf[target_variable])  # DEBUG

          QDMdg.train(
              ref=refdf[target_variable],
              hist=histdf[target_variable]
          )

          print(QDMdg)  # DEBUG

          QDMdg.ds.to_zarr(
              store=os.environ.get("OUT"),
              mode="w"
          )
        resources:
          requests:
            memory: 48Gi
            cpu: "2000m"
          limits:
            memory: 48Gi
            cpu: "8000m"
        volumeMounts:
          - name: out
            mountPath: /mnt/out
      volumes:
        - name: out
          emptyDir: { }
      activeDeadlineSeconds: 172800
      retryStrategy:
        limit: 4
        retryPolicy: "Always"


    - name: train-qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr  # Needs to be az://... format
          - name: hist-zarr  # Needs to be az://... format
          - name: out-zarr  # Needs to be az://... format
          - name: kind
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.3.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ "dodola" ]
        args:
          - "train-qdm"
          - "--historical"
          - "{{ inputs.parameters.hist-zarr }}"
          - "--reference"
          - "{{ inputs.parameters.ref-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--variable"
          - "{{ inputs.parameters.variable }}"
          - "--kind"
          - "{{ inputs.parameters.kind }}"
        resources:
          requests:
            memory: 48Gi
            cpu: "2000m"
          limits:
            memory: 48Gi
            cpu: "2500m"
        # emptyDir volume as k8sapi can't output to base image layer:
        volumeMounts:
          - name: out
            mountPath: /mnt/out
      volumes:
        - name: out
          emptyDir: { }
      activeDeadlineSeconds: 172800
      retryStrategy:
        limit: 4
        retryPolicy: "Always"


    - name: qdm-adjust-year
      inputs:
        parameters:
          - name: future-zarr  # Needs to be az://... format
          - name: year
          - name: qdm-model-zarr
          - name: variable
      outputs:
        artifacts:
          - name: adjusted
            path: "/mnt/out/{{ inputs.parameters.year }}.nc"
            archive:
              none: { }
            s3:
              key: "{{ workflow.name }}/qdm-years/{{ inputs.parameters.year }}.nc"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.3.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ dodola ]
        args:
          - "apply-qdm"
          - "--simulation"
          - "{{ inputs.parameters.future-zarr }}"
          - "--out"
          - "/mnt/out/{{ inputs.parameters.year }}.nc"
          - "--year"
          - "{{ inputs.parameters.year }}"
          - "--variable"
          - "{{ inputs.parameters.variable }}"
          - "--qdm"
          - "{{ inputs.parameters.qdm-model-zarr }}"
        resources:
          requests:
            memory: 42Gi
            cpu: "2000m"
          limits:
            memory: 42Gi
            cpu: "2000m"
        # emptyDir volume as k8sapi can't output to base image layer:
        volumeMounts:
          - name: out
            mountPath: /mnt/out
      volumes:
        - name: out
          emptyDir: { }
      activeDeadlineSeconds: 86400
      retryStrategy:
        limit: 2
        retryPolicy: "Always"


    - name: netcdfs2zarr
      inputs:
        parameters:
          - name: in-dir  # DIR with container containing all the nc files. No az://!
          - name: out-zarr  # Needs to have "az://..." format
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.1.0
        env:
          - name: IN
            value: "{{ inputs.parameters.in-dir }}"
          - name: OUT
            value: "{{ inputs.parameters.out-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          # Real workflow begins here:
          import os
          import numpy as np
          import xarray as xr
          from adlfs import AzureBlobFileSystem


          fs = AzureBlobFileSystem()
          # Grab dir of yearly NetCDFs, read into single remote Zarr.
          local_stash = "/mnt/in/"
          fs.get(rpath=os.environ.get("IN"), lpath=local_stash, recursive=True)

          d = xr.open_mfdataset(
              f"{local_stash}*.nc",
              concat_dim="time"
          )
          d.to_zarr(
              os.environ.get("OUT"),
              mode="w",
              compute=True
          )
        resources:
          requests:
            memory: 42Gi
            cpu: "1000m"
          limits:
            memory: 42Gi
            cpu: "8000m"
        # emptyDir volume as k8sapi can't output to base image layer:
        volumeMounts:
          - name: in
            mountPath: /mnt/in
      volumes:
        - name: in
          emptyDir: { }
      activeDeadlineSeconds: 480
      retryStrategy:
        limit: 4
        retryPolicy: "Always"


    - name: upsample
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
          - name: lat-scale
            value: 4
          - name: lon-scale
            value: 4
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:dev
        imagePullPolicy: Always
        env:
          - name: IN_ZARR
            value: "{{ inputs.parameters.in-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import xarray as xr

          print("This is the upsample step")
        resources:
          requests:
            memory: 500Mi
            cpu: "1000m"
          limits:
            memory: 1Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900


    - name: downscale-train-analog
      inputs:
        parameters:
          - name: variable
          - name: ref1x1-zarr
          - name: ref0p25x0p25-zarr
          - name: out-zarr
          - name: kind
          - name: firstyear
          - name: lastyear
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:dev
        imagePullPolicy: Always
        env:
          - name: IN_ZARR
            value: "{{ inputs.parameters.in-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import xarray as xr

          print("This is the downscale-train-analog step")
        resources:
          requests:
            memory: 500Mi
            cpu: "1000m"
          limits:
            memory: 1Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900


    - name: downscale-analog-adjust-year
      inputs:
        parameters:
          - name: to-downscale-zarr
          - name: variable
          - name: year
          - name: analog-model-zarr
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:dev
        imagePullPolicy: Always
        env:
          - name: IN_ZARR
            value: "{{ inputs.parameters.in-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import xarray as xr

          print("This is the downscale-analog-adjust-year step")
        resources:
          requests:
            memory: 500Mi
            cpu: "1000m"
          limits:
            memory: 1Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900


    # Prints data on stored zarr file to log.
    - name: printzarr
      inputs:
        parameters:
          - name: in-zarr
      script:
        image: downscalecmip6.azurecr.io/dodola:0.2.0
        env:
          - name: IN_ZARR
            value: "{{ inputs.parameters.in-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          # Real workflow begins here:
          import os
          import xarray as xr

          target = os.environ.get("IN_ZARR")
          print(f"opening {target}")

          d = xr.open_zarr(target)

          print(d)
        resources:
          requests:
            memory: 500Mi
            cpu: "1000m"
          limits:
            memory: 1Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900
